<#assign className = table.className>
<#assign classNameFirstLower = className?uncap_first>   
<#assign classNameLowerCase = className?lower_case>   
<#assign classNameUpperCase = className?upper_case> 
<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="${basepackage}.dao.mapper.${className}Mapper">	
	
	<sql id="table"> ${table.sqlName} </sql>
	
	<resultMap id="BaseResultMap" type="${basepackage}.dao.module.${className}">
		<#list table.compositeIdColumns as column>
        <id property="${column.columnNameLower}" jdbcType="${column.jdbcType}" column="${column.sqlName}"/>
        </#list>
		<#list table.notPkColumns as column>
		<result property="${column.columnNameLower}" jdbcType="${column.jdbcType}" column="${column.sqlName}"/>
		</#list>
    </resultMap>
	
	<sql id="columns">
	    <![CDATA[
        <#list table.columns as column>${column.sqlName} <#if column_has_next>,</#if></#list>
	    ]]>
	</sql>
	
	<sql id="condition_sql">
	    <#list table.columns as column>
		<#if column.isDateTimeColumn>
		<if test="${column.columnNameLower}Begin != null and ${column.columnNameLower}Begin.trim() != ''">
		and ${column.sqlName} >= ${'#{'}${column.columnNameLower}Begin${'}'}
		</if>
		<if test="${column.columnNameLower}End != null and ${column.columnNameLower}End.trim() != ''">
		and ${column.sqlName} &lt;= ${'#{'}${column.columnNameLower}End${'}'}
		</if>
		<#else>
		<#if column.jdbcType == 'VARCHAR'>
		<if test="${column.columnNameLower} != null and ${column.columnNameLower}.trim() != ''">
		and ${column.sqlName} = ${'#{'}${column.columnNameLower}${'}'}
		</if>
		<#else>
		<if test="${column.columnNameLower} != null">
		and ${column.sqlName} = ${'#{'}${column.columnNameLower}${'}'}
		</if>
		</#if>
		</#if>
       </#list>
	</sql>
	
	<insert id="insert" parameterType="${basepackage}.dao.module.${className}" useGeneratedKeys="true" keyProperty="id">
	    INSERT INTO 
		<include refid="table" />
	<![CDATA[
		(
		<#list table.notPkColumns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
		) VALUES (
		<#list table.notPkColumns as column>
        	${'#{'}${column.columnNameLower}${',jdbcType='}${column.jdbcType}${'}'} <#if column_has_next>,</#if>
        </#list>
		)
	]]>
	</insert>
	
	<insert id="batchInsert" parameterType="${basepackage}.dao.module.${className}">
		INSERT INTO	
		<include refid="table" />
		(
		<#list table.notPkColumns as column>
        	${column.sqlName} <#if column_has_next>,</#if>
        </#list>
		)
		VALUES
		<foreach collection="list" item="item" index="index" separator=",">
		(
		<#list table.notPkColumns as column>
        	${'#{'}item.${column.columnNameLower}${',jdbcType='}${column.jdbcType}${'}'} <#if column_has_next>,</#if>
        </#list>
        )
		</foreach>
	</insert>
	
	<update id="update" parameterType="${basepackage}.dao.module.${className}">
		UPDATE 
		<include refid="table" />
		<set>
			<#list table.notPkColumns as column>
			<if test="${column.columnNameLower} != null">
	        ${column.sqlName} = ${'#{'}${column.columnNameLower}${',jdbcType='}${column.jdbcType}${'}'} ,
	        </if>
	        </#list>
	    </set>
		WHERE 
			<#list table.compositeIdColumns as column>
	        ${column.sqlName} = ${'#{'}${column.columnNameLower}${'}'} <#if column_has_next> AND </#if>
	        </#list>
	</update>
	
	<update id="updateByVersion" parameterType="${basepackage}.dao.module.${className}">
		UPDATE 
		<include refid="table" />
		<set>
			<#list table.notPkColumns as column>
			<#if column.columnNameLower != 'version'>
			<if test="${column.columnNameLower} != null">
	        ${column.sqlName} = ${'#{'}${column.columnNameLower}${',jdbcType='}${column.jdbcType}${'}'} ,
	        </if>
			</#if>
	        </#list>
	        version = ${'#{'}version${'}'} + 1 
	    </set>
		WHERE 
			<#list table.compositeIdColumns as column>
	        ${column.sqlName} = ${'#{'}${column.columnNameLower}${'}'} <#if column_has_next> AND </#if>
	        </#list>
	        AND version = ${'#{'}version${'}'}
	</update>

	<delete id="delete" parameterType="java.lang.Integer">
		DELETE FROM 
		<include refid="table" />
	<![CDATA[
		WHERE
		<#list table.compositeIdColumns as column>
        ${column.sqlName} = ${'#{'}${column.columnNameLower}${'}'} <#if column_has_next> AND </#if>
		</#list>
	]]>
	</delete>
    
	<select id="selectById" resultMap="BaseResultMap" parameterType="java.lang.Integer">
	    SELECT 
	    <include refid="columns"/> 
		FROM 
		<include refid="table" />
	<![CDATA[ 
		WHERE 
		<#list table.compositeIdColumns as column>
        ${column.sqlName} = ${'#{'}${column.columnNameLower}${'}'} <#if column_has_next> AND </#if>
		</#list>
	]]>
	</select>
	 
	<select id="selectCount" resultType="java.lang.Integer" parameterType="java.util.Map">
    	SELECT count(1) 
    	FROM 
    	<include refid="table" />
 		<where>
			<include refid="condition_sql" />
		</where>
	</select>
    
	<select id="selectList" resultMap="BaseResultMap" parameterType="java.util.Map">
		SELECT 
		<include refid="columns"/>  
		FROM 
    	<include refid="table" />
		<where>
			<include refid="condition_sql" />
		</where> 
	    <if test="orderByParam != null and orderByParam != ''"> 
			<![CDATA[ ORDER BY  ${'${'}orderByParam${'}'}  ${'${'}sortByParam${'}'}]]>
		</if>
		<if test="orderByParam == null or  orderByParam == ''"> 
			<![CDATA[ ORDER BY ID DESC]]>
		</if>
		<if test="size != null and size != '' and skip != null and skip != ''">
        	<![CDATA[ LIMIT ${'#{'}skip${'}'},${'#{'}size${'}'} ]]>
        </if>
        <if test="size == null or size == '' or skip == null or skip == ''">
        	<![CDATA[ LIMIT 1 ]]>
        </if>
	</select>
	
</mapper>


